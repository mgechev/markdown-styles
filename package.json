{
  "name": "markdown-styles",
  "description": "Markdown to HTML generator and multiple CSS themes for Markdown",
  "version": "2.0.3",
  "author": {
    "name": "Mikito Takada",
    "email": "mixu@mixu.net",
    "url": "http://blog.mixu.net/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mgechev/markdown-styles.git"
  },
  "bin": {
    "generate-md": "./bin/generate-md"
  },
  "keywords": [
    "markdown",
    "markup",
    "html",
    "documentation",
    "docs",
    "static",
    "highlight"
  ],
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha -R spec ./test/*.test.js"
  },
  "dependencies": {
    "handlebars": "~2.0.0",
    "markdown-stream-utils": "~1.0.2",
    "mkdirp": "0.3.5",
    "pipe-iterators": "~1.1.0",
    "resolve": "~0.6.1",
    "wildglob": "0.0.1",
    "xtend": "~4.0.0",
    "yargs": "~1.1.3"
  },
  "devDependencies": {
    "file-fixture": "0.0.2",
    "mds-csv": "0.0.0"
  },
  "readme": "# markdown-styles\n\nConverts Markdown files to HTML, with over a dozen builtin themes. The new `v2.0` release includes a ton of enhancements!\n\nLooking for something to generate a blog from Markdown files? Check out [ghost-render](https://github.com/mixu/ghost-render).\n\n## Features\n\n- `v2.0` is a major rewrite, with significant usability improvements; the core has been rewritten to use object mode streams via [pipe-iterators](https://github.com/mixu/pipe-iterators).\n- Includes 15+ ready-made CSS stylesheets for Markdown, see the bottom of the readme for screenshots.\n- Reuse the stylesheets or use the `generate-md` tool to convert a folder of Markdown files to HTML using one of the built-in layouts or a custom layout.\n- Completely static output is easy to host anywhere.\n- Metadata support: Each file can include additional metadata in a header section (new in 2.0!), such as the page title and author name which can then be used in the layout.\n- Layout features:\n  - Built in support for code syntax highlighting via highlight.js (new in 2.0!)\n  - All layouts now include a Github-style code highlighting theme by default (new v2.0!)\n  - Built in table of contents generation from Markdown headings, now fully customizable by replacing the `{{> toc}}` partial in custom layout (new in 2.0!).\n  - Automatically detects the document title from the first heading in the Markdown markup (new in 2.0!)\n- Easier to get started with a custom layout via `--exports`, which exports a built in layout as a starting point for your custom layout (new in 2.0).\n- Create your own layout based on an existing layout via `--layout` with:\n  - Full [Handlebars](http://handlebarsjs.com/) support for layouts, helpers and partials (new in 2.0!)\n  - Fully customizable table of contents template via the `toc` partial (new in 2.0!)\n  - Support for relative path generation via the `{{asset 'path'}}` helper\n- API support: `markdown-styles` now has a public API (new in 2.0!)\n- Changes in 2.0:\n  - Deprecated `--command`, `{{styles}}`, `--template`, `--asset-dir`, `--partials`, `--helpers`, `--runner`. Most of this functionality can be easily replicated much more cleanly with the new features.\n  - Improved highlighter support. Every built in layout now includes a default highlight.js CSS stylesheet and you no longer need to add extra CLI options to enable highlighting.\n  - Layout partials and helpers have been renamed: `{{content}}` -> `{{> content}}`, `{{toc}}` -> `{{> toc}}`, `{{assetsRelative}}` -> `{{asset 'path'}}`\n  - The default layout is now `github`, which looks a lot like Github readmes.\n\n\n-----\n\n## Quickstart\n\nInstall `generate-md` via npm (to get npm, just [install Node.js](http://nodejs.org/download/)):\n\n    sudo npm install -g markdown-styles\n\nCreate a markdown file and then convert it to html:\n\n    mkdir input/\n    echo \"# Hello world\\n YOLO\" > input/index.md\n    generate-md --layout github --input ./input --output ./output\n    google-chrome ./output/index.html\n\nTry out different layouts by changing the `--layout` parameter; screenshots are at the bottom of this page.\n\n![montage](https://github.com/mixu/markdown-styles/raw/master/screenshots/montage.png)\n\n## generate-md CLI options\n\n- `--input <path>` specifies the input directory (default: `./input/`).\n- `--output <path>` specifies the output directory (default: `./output/`).\n- `--layout <path>` specifies the layout. It can be:\n  - The name of a builtin layout, such as `github` or `mixu-page`.\n  - A path to a layout folder (full path, or path relative to `process.cwd`).\n  - A layout folder consists of:\n    - `./page.html`, the template to use in the layout\n    - `./assets`, the assets folder to copy over to the output\n    - `./partials`, the [partials](#partials) directory\n    - `./helpers`, the [helpers](#helpers) directory\n  - Note that `--template`, `--asset-dir`, `--partials` and `--helpers` are deprecated. This simplifies the loading logic. You need to put each of those resources in the same layout folder.\n- `--export <name>`: Exports a built-in layout to a directory. Use `--output <path>` to specify the location to write the built-in layout. For example, `--export github --output ./custom-layout` will copy the `github` builtin layout to `./custom-layout`.\n- `--highlight-<language> <module>`: Specifies a custom highlighter module to use for a specific language. For example, `--highlight-csv mds-csv` will highlight any `csv` code blocks using the `mds-csv` module.\n\n## The resulting output\n\nThe output HTML is fully static and uses relative paths to the asset files, which are also copied into the output folder. This means that you could, for example, point a HTTP server at the root of `./test/` and be done with it or push the output folder to Amazon S3.\n\n## Syntax highlighting\n\n`v2.0` has syntax highlighting enabled by default. Every layout has also been updated to include a default [highlight.js](https://highlightjs.org/) syntax highlighting theme, which means everything works out of the box. For more highlighter themes, [check out this demo site](https://highlightjs.org/static/demo/) - you can find the [highlight.js CSS styles here](https://github.com/isagalaev/highlight.js/tree/master/src/styles).\n\nTo enable language-specific syntax highlighting, you need to specify the language of the code block, e.g.:\n\n    ```js\n    var foo = 'bar';\n    ```\n\n`v2.0` also supports additional language specific syntax highlighters - check out [mds-csv](https://github.com/mixu/mds-csv) for an example of a syntax highlighter for a specific language.\n\nTo enable additional language-specific syntax highlighters, install the module (e.g. `mds-csv`), then add `--highlight-{languagename} {modulename}` to the command line. For example, `generate-md --highlight-csv mds-csv ...` to enable the CSV highlighter for `csv` code blocks.\n\n## Table of contents\n\nThe following built in layouts include the `{{~> toc}}` partial:\n\n- mixu-book\n- mixu-bootstrap-2col\n- mixu-gray\n- mixu-radar\n\nThese are mostly templates that have a sensible place to put this table of contents, such as a sidebar. I didn't want to default to putting a table of contents into the layouts that had no sidebar, but you can add it quite easily.\n\nThe `{{~> toc}}` partial generates a table of contents list. The list contains links to every header in your Markdown file. In addition, every Markdown header is automatically converted to a linkable anchor (e.g. `#table_of_contents`) when the page is generated. You can customize the table of contents markup by overriding the ./partials/[toc.hbs](https://github.com/mixu/markdown-styles/blob/master/builtin/partials/toc.hbs) partial in your custom layout.\n\n## Metadata sections\n\nEach markdown file can have metadata associated with it. To set the metadata, start your markdown file with a metadata block that looks like this:\n\n```\ntitle: Page title\n---\n# Hello world\nYOLO\n```\n\nThere must be at least three - characters that separate the header from the rest of the content (on a single line).\n\nYou can reference the metadata values in your template by name. The default layouts only make use of the `{{title}}` metadata value, but your custom layouts can refer to any additional fields you want.\n\n`{{title}}` is used as the page title. If you do not set the value explicitly, it is automatically detected from the first heading in the markdown file.\n\nThe metadata can also be written using JSON syntax or YAML syntax. This makes it possible to add arrays and hashes in the metadata. Using [handlebars.js](https://github.com/wycats/handlebars.js) you can go even further. For example, you can add a tags array into the metadata section:\n\n```\ntitle: Page title\ntags: [\"handlebars\", \"template\"]\n---\n# Hello world\n```\n\n... which can then be [iterated over using the standard Handlebars `{{#each}}` iterator](http://handlebarsjs.com/block_helpers.html):\n\n```html\n<ul>\n{{#each tags}}\n    <li>{{ this }}</li>\n{{/each}}\n</ul>\n```\n\nwhich will result in:\n\n```html\n<ul>\n    <li>handlebars</li>\n    <li>template</li>\n</ul>\n```\n\nIf you take a look at [the `{{~> toc}}` built in partial](https://github.com/mixu/markdown-styles/blob/master/builtin/partials/toc.hbs), you can see that it is actually iterating over a metadata field called `headings` using the same syntax. The `headings` metadata is an array of objects with an `id` field (the HTML anchor id), a `text` field (the heading text) and a `depth` field (the depth of the heading, e.g. the number of `#` characters in the heading).\n\n## Writing your own layout\n\n`v2.0` makes it easier to get started with a custom layout via `--export`, which exports a built in layout as a starting point. Just pick a reasonable built in layout and start customizing. For example:\n\n    generate-md --export github --output ./my-layout\n\nwill export the `github` layout to `./my-layout`. To make use of your new layout:\n\n    generate-md --layout ./my-layout --input ./some-input --output ./output\n\nIf you look under `./my-layout`, you'll see that a layout folder consists of:\n\n- `./page.html`, the template to use in the layout\n- `./assets`, the assets folder to copy over to the output\n- `./partials`, the [partials](#partials) directory\n- `./helpers`, the [helpers](#helpers) directory\n\nSee the next few sections for more details for how these features work.\n\n### Template Evaluation (page.html)\n\nThe [handlebars.js](https://github.com/wycats/handlebars.js) template language is used to evaluate both the template and the markdown.\n\nHere is a list of all the built in features:\n\n- `{{~> content}}`: renders the markdown content\n- `{{asset 'asset-path'}}`: renders a specific asset path (previously `{{assetsRelative}}` / `{{styles}}`)\n- `{{~> toc}}`: renders the table of contents\n- `{{title}}`: renders the title from the metadata section\n\nAny metadata fields you have defined in the page's metadata section can be referenced in `page.html` by name. For example, `{{title}}` is replaced with the value of the `title` metadata field when the template is rendered.\n\nYou can include your own helpers and partials in your custom layout as shown below.\n\n### Assets folder (./assets)\n\nAll files in the assets folder are copied from the layout folder to the output folder.\n\nTo refer to files in the assets folder, use the `{{asset 'path'}}` helper. For example, `{{asset 'css/style.css'}}` will be replaced with a relative path to the file in `./assets/css/style.css`. Take a look at the built in layouts for some examples.\n\n### Partials\n\nPartials are html files that can be included via handlebars `{{> partialName}}` style. Usually they are .html files. For example, if `footer.html` resides in the partials directory, `{{> footer}}` will be replaced with `footer.html`'s content. For more advanced topics, see [handlebars partials documentation](https://github.com/wycats/handlebars.js#partials). Don't use `content.html`, it is reserved to the html generated from the markdown. You can override the `toc` partial by adding `./partials/toc.html` as a partial in your custom layout, e.g.\n\n```html\n<h1>My Table of Contents</h1>\n<ul class=\"nav nav-list\">\n  {{#each headings}}\n    <li><a href=\"#{{id}}\">{{text}}</a></li>\n  {{/each}}\n</ul>\n```\n\n### Helpers\n\nHelpers are functions that you can use throughout the template. See [handlebars helpers](https://github.com/wycats/handlebars.js#registering-helpers).\nFor example, add `linkTo.js` to the `./helpers` directory in your custom layout:\n\n```js\nvar Handlebars = require('handlebars');\nmodule.exports = function(){\n  return new Handlebars.SafeString(\"<a href='\" + Handlebars.Utils.escapeExpression(this.url) + \"'>\" + Handlebars.Utils.escapeExpression(this.body) + \"</a>\");\n};\n```\n\nNext, in `./my-layout`, run `npm install handlebars` (since we're requiring handlebars) in the code.\n\nIn your metadata heading:\n\n```\nlinks:\n  - url: \"/hello\"\n    body: \"Hello\"\n  - url: \"/world\"\n    body: \"World!\"\n---\n# Hello world\n```\nor:\n\n```\nlinks: [ { url: \"/hello\", body: \"Hello\"},\n         { url: \"/world\", body: \"World!\" } ]\n---\n# Hello world\n```\nand somewhere in your template:\n\n```html\n<ul>{{#links}}<li>{{{linkTo}}}</li>{{/links}}</ul>\n```\n\nNote the usage of the \"triple-stash\", e.g. `{{{` here. The technical reason for this is documented [in this issue in Handlebars](https://github.com/wycats/handlebars.js/issues/886) and will be apparently fixed in Handlebars `3.0`. For now, use triple-stash to invoke any helpers that generate HTML.\n\n... will result in:\n\n```html\n<ul>\n  <li>\n    <a href='/hello'>Hello</a>\n  </li>\n  <li>\n    <a href='/world'>World!</a>\n  </li>\n</ul>\n```\n\n### `meta.json`\n\nIf you want to apply additional metadata to all Markdown files in a particular folder, you can add a file named `meta.json` to the input folder. (Note: in `v1.x`, `meta.json` was read from `process.cwd()`, e.g. the folder from which you ran `generate-md`).\n\n`meta.json` will be read, and the values in it are added to the regular metadata. The values from `meta.json` act like default values, e.g. the per-file metadata section values will override the values from `meta.json`.\n\nThe metadata is scoped by the top-level directory in `./input`.\n\nFor example, a `./input/meta.json` file like this:\n\n````json\n{\n  \"foo\": {\n    \"repoUrl\": \"https://github.com/mixu/markdown-styles\"\n  }\n}\n````\n\nwould make the metadata value `{{repoUrl}}` available in the template, for all files that are in the directory `./input/foo`. If any markdown file in `./input/foo/` defines a metadata value called `repoUrl`, then that value will override the value from `meta.json`.\n\n### API\n\nIt exists, and uses the same options as `generate-md`. Docs TODO, see `bin/generate-md` and `test/api.test.js` for now.\n\n## Acknowledgments\n\nI'd like to thank the following people for either contributing to markdown-styles directly or making CSS stylesheets available with a permissive open source license:\n\n- the `witex` style is based on [AndrewBelt/WiTeX](https://github.com/AndrewBelt/WiTeX)\n- @iamdoron for contributing the initial implementation of the Handlebars templating integration\n- the `github` style is based on [sindresorhus/github-markdown-css](https://github.com/sindresorhus/github-markdown-css)\n- the `bootstrap3` style was contributed by @MrJuliuss\n- jasonm23-dark, jasonm23-foghorn, jasonm23-markdown and jasonm23-swiss are based on https://github.com/jasonm23/markdown-css-themes by [jasonm23](https://github.com/jasonm23)\n- thomasf-solarizedcssdark and thomasf-solarizedcsslight are based on https://github.com/thomasf/solarized-css by [thomasf](https://github.com/thomasf)\n- markedapp-byword is based on the user-contributed stylesheet at http://bywordapp.com/extras/\n- roryg-ghostwriter is based on https://github.com/roryg/ghostwriter\n- github is based on [sindresorhus/github-markdown-css](https://github.com/sindresorhus/github-markdown-css) (sorry, sindresorhus-github is too long to type as a layout name!)\n\n## Screenshots of the layouts\n\nNote: these screenshots are generated via phantomjs, so they look worse than they do in a real browser because the font rendering is just bad and lacks webfont support. For example, WiTeX actually uses the Latin Modern Roman font from TeX but the screenshots show the fallback font.\n\n### github\n\n![github](https://github.com/mixu/markdown-styles/raw/master/screenshots/github.png)\n\n### witex\n\n![witex](https://github.com/mixu/markdown-styles/raw/master/screenshots/witex.png)\n\n### roryg-ghostwriter\n\n![roryg-ghostwriter](https://github.com/mixu/markdown-styles/raw/master/screenshots/roryg-ghostwriter.png)\n\n### mixu-bootstrap\n\n![mixu-bootstrap](https://github.com/mixu/markdown-styles/raw/master/screenshots/mixu-bootstrap.png)\n\n### mixu-bootstrap-2col\n\n![mixu-bootstrap-2col](https://github.com/mixu/markdown-styles/raw/master/screenshots/mixu-bootstrap-2col.png)\n\n### mixu-gray\n\n![mixu-gray](https://github.com/mixu/markdown-styles/raw/master/screenshots/mixu-gray.png)\n\n### jasonm23-dark\n\n![jasonm23-dark](https://github.com/mixu/markdown-styles/raw/master/screenshots/jasonm23-dark.png)\n\n### jasonm23-foghorn\n\n![jasonm23-foghorn](https://github.com/mixu/markdown-styles/raw/master/screenshots/jasonm23-foghorn.png)\n\n### jasonm23-markdown\n\n![jasonm23-markdown](https://github.com/mixu/markdown-styles/raw/master/screenshots/jasonm23-markdown.png)\n\n### jasonm23-swiss\n\n![jasonm23-swiss](https://github.com/mixu/markdown-styles/raw/master/screenshots/jasonm23-swiss.png)\n\n### markedapp-byword\n\n![markedapp-byword](https://github.com/mixu/markdown-styles/raw/master/screenshots/markedapp-byword.png)\n\n### mixu-book\n\n![mixu-book](https://github.com/mixu/markdown-styles/raw/master/screenshots/mixu-book.png)\n\n### mixu-page\n\n![mixu-page](https://github.com/mixu/markdown-styles/raw/master/screenshots/mixu-page.png)\n\n### mixu-radar\n\n![mixu-radar](https://github.com/mixu/markdown-styles/raw/master/screenshots/mixu-radar.png)\n\n### thomasf-solarizedcssdark\n\n![thomasf-solarizedcssdark](https://github.com/mixu/markdown-styles/raw/master/screenshots/thomasf-solarizedcssdark.png)\n\n### thomasf-solarizedcsslight\n\n![thomasf-solarizedcsslight](https://github.com/mixu/markdown-styles/raw/master/screenshots/thomasf-solarizedcsslight.png)\n\n### bootstrap3\n\n![bootstrap3](https://github.com/mixu/markdown-styles/raw/master/screenshots/bootstrap3.png)\n\n## Contributing new styles to markdown-styles\n\nAdd new layouts to `./layouts/name`. To regenerate the pages, you need to run:\n\n    git clone git://github.com/mixu/markdown-styles.git\n    npm install\n    make build\n\nTo regenerate the screenshots, you need cutycapt (or some other Webkit to image tool) and imagemagic. On Ubuntu / Debian, that's:\n\n    sudo aptitude install cutycapt imagemagick\n\nYou also need to install the web fonts locally so that cutycapt will find them, run `node font-download.js` to get the commands you need to run (basically a series of wget and fc-cache -fv commands).\n\nFinally, run:\n\n    make screenshots\n\nIf you have phantomjs installed, run:\n\n    make phantomjs\n\nwhich will use a phantomjs script to capture the screenshots.\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/mgechev/markdown-styles/issues"
  },
  "homepage": "https://github.com/mgechev/markdown-styles",
  "_id": "markdown-styles@2.0.3",
  "_shasum": "bc0fc60d8bda4d0eb09522032a34ff90cb234665",
  "_from": "https://github.com/mgechev/markdown-styles/tarball/master",
  "_resolved": "https://github.com/mgechev/markdown-styles/tarball/master"
}
